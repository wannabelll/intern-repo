pipeline {
    agent {
        label "w-1"
    }

    environment {
        // Get the latest Git tag for versioning
        GIT_TAG = sh(script: "git describe --tags --abbrev=0", returnStdout: true).trim()
        GITHUB_TOKEN = credentials('jenkins-github-integration-demo.2025-03-06.private-key.pem')
        REPO_URL = 'https://github.com/wannabelll/intern-repo.git'
        ZIP_NAME = "gitea-archive-${GIT_TAG}.tar.gz"  // tar.gz file name based on tag
    }

    tools {
        go '1.24.0'
    }

    stages {
        // Run Go Build
        stage('Go Build') {
            steps {
                script {
                    // Build the Go binary, using flags to reduce binary size
                    sh 'go build -ldflags="-s -w" -o gitea'
                }
            }
        }

        // Create a tar.gz archive of your project
        stage('Create TAR Archive') {
            steps {
                script {
                    // Define the files to include relative to the workspace
                    def filesToInclude = [
                        "web_src/",
                        "templates/",
                        "models/",
                        "public/",
                        "options/",
                        "node_modules/",
                        "modules/",
                        "gitea",  // The built Go binary
                        "custom/"
                    ]

                    // Build the tar command dynamically, using -C to avoid absolute paths
                    def tarCommand = "tar -czf ${ZIP_NAME} -C $WORKSPACE "
                    filesToInclude.each { file ->
                        tarCommand += "${file} "
                    }

                    // Run the tar command
                    sh tarCommand
                }
            }
        }

        // Create GitHub Release and Upload the tar.gz
        stage('Create GitHub Release') {
            when { branch 'main' }
            steps {
                script {
                    echo 'Checking if GitHub Release already exists...'

                    // Check if the release already exists using GitHub CLI
                    def releaseExists = sh(
                        script: "gh release view ${GIT_TAG} --repo ${REPO_URL} > /dev/null 2>&1",
                        returnStatus: true
                    ) == 0

                    if (releaseExists) {
                        echo "Release ${GIT_TAG} already exists. Skipping release creation."
                    } else {
                        echo 'Creating GitHub Release...'
                        
                        // Create the GitHub release and upload the tar.gz file
                        sh """
                        gh release create \
                            ${GIT_TAG} \
                            ${ZIP_NAME} \
                            --repo ${REPO_URL} \
                            --generate-notes
                        """
                    }
                }
            }
        }
    }
}
